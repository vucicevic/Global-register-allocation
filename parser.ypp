%{

    #include <iostream>
    #include <cstdlib>
    #include <string>
    #include <vector>
    #include <map>
    #include <stack>
    #include <algorithm>
    #include <iterator>
    
    #define YYDEBUG 1
    
    using namespace std;


    void yyerror(string error_msg) {
        cerr << error_msg << endl;
        exit(EXIT_FAILURE);
    }
    
    extern int yylex();
    
    
    #include "statement.hpp"
    
    // colection of statements
    vector<Stmt*> statements;
    
%}

%token if_token goto_token assign_token return_token
%token <s> id_token function_token relop_token
%token <i> num_token

%type <t>   T
%type <e>   Expr Cond
%type <stm> Statement Assign

%left relop_token
%left '+' '-'
%left '*' '/'

%union{
    // class types
    Term* t;
    Expression* e;
    Stmt* stm;
    string* s;
    
    // non-class types
    int i;
}

%%

Program : Program num_token Statement '\n'                  {}
|         num_token Statement '\n'                          {}
;
Statement : Assign                                          { $$ = $1;               statements.push_back($$);             }
|         if_token Cond goto_token num_token                { $$ = new IfGo($2,$4);  statements.push_back($$);             }
|         goto_token num_token                              { $$ = new GoTo($2);     statements.push_back($$);             }
|         return_token id_token                             { $$ = new Return(*$2);  statements.push_back($$);  delete $2; }
;
Assign  : id_token assign_token Expr                        { $$ = new Assign(*$1,$3);       delete $1;             }
|         id_token assign_token function_token '(' T ')'    { $$ = new AssignF(*$1,*$3,$5);  delete $1;  delete $3; }
;
Expr    : T '+' T                                           { $$ = new Binary($1,"+",$3); }
|         T '-' T                                           { $$ = new Binary($1,"-",$3); }
|         T '*' T                                           { $$ = new Binary($1,"*",$3); }
|         T '/' T                                           { $$ = new Binary($1,"/",$3); }
|         T                                                 { $$ = new Unary($1);         }
;
Cond    : T relop_token T                                   { $$ = new Binary($1,*$2,$3);  delete $2; }
;
T       : id_token                                          { $$ = new Id(*$1);  delete $1; }
|         num_token                                         { $$ = new Num($1);             }
;

%%

void insOuts(vector<set<string>>& in, vector<set<string>>& out, const vector<set<string>>& use, const vector<set<string>>& def, const vector<set<unsigned>>& next);

map<string,set<string>> build (const vector<set<string>>&in, const vector<set<string>>& out);

void simplify_spill(map<string,set<string>>& graph, stack<string>& var_stack, const unsigned num_of_regs); 

void select(map<string,unsigned>& mapping,stack<string>& var_stack,const map<string,set<string>>& graph, const set<unsigned>& registers, set<string>& spilled_vars);

void deadCode(vector<Stmt*>& statements, vector<set<string>>& in, vector<set<string>>& out);

void updateLS(const vector<unsigned>& before, const vector<unsigned>& after, vector<Stmt*> statements);

void printStmts(const string& message, const vector<Stmt*>& statements);

int main (int argc, char** argv) {

    extern FILE* yyin;
    
    unsigned num_of_regs;
    
    if(3 != argc){
    
        cerr << "Wrong number of args" << endl;
        cout << "Usage : ./GRA file_path number_of_registers" << endl;
        exit(EXIT_FAILURE);
    }
    else{
        
        FILE* in = fopen(argv[1],"r");
        if(nullptr == in){
            cerr << "Opening of the in file failed" << endl;
            exit(EXIT_FAILURE);
        }
        num_of_regs = atoi(argv[2]);
        yyin = in;
    }
    
    //yydebug = 1;
    
    
    yyparse();
    fclose(yyin);
    
    printStmts("Original code",statements);
    
    bool first_pass = true;
    bool allocated = false;
    
    // register set : [1,num_of_regs]
    set<unsigned> registers;
    for(unsigned i = 1 ; i <= num_of_regs ; i++)
        registers.insert(i);
    
    // set holding spilled variables (for each of them we made Load and Store)
    set<string> actually_spilled;
    
    // starting the algorithm
    while(!allocated) {
        
        // determine use, def and follow and then calculate IN and OUT sets
        vector<set<string>> use(statements.size());
        vector<set<string>> def(statements.size());
        vector<set<unsigned>> follow(statements.size());
        
        for(unsigned i = 0 ; i < statements.size() ; i++){
            use[i] = statements[i]->use();
            def[i] = statements[i]->def();
            follow[i] = statements[i]->follow(i,statements.size()-1);
        }

        vector<set<string>> in(statements.size());
        vector<set<string>> out(statements.size());
        insOuts(in,out,use,def,follow);
        
        // since we have IN and OUT sets we can eliminate dead code (this is done only once!)
        if(first_pass) {
            first_pass = false;
            
            unsigned stmt_num_before = statements.size();
            deadCode(statements,in,out);
            unsigned stmt_num_after = statements.size();
        
            if(stmt_num_after != stmt_num_before) 
                printStmts("After removing dead code",statements);
        }
    
        // Build - get interference graph 
        map<string,set<string>> graph = build(in,out);
        
        // Simplify and spill - get variable stack
        map<string,set<string>> graph_cpy(graph);
        stack<string> var_stack;
        simplify_spill(graph_cpy,var_stack,num_of_regs);
        
        // mapping : variable -> register (all 0 for now)
        map<string,unsigned> mapping;
        for(auto it = graph.begin() ; it != graph.end() ; it++)
            mapping[it->first] = 0;
    
        // Select - trying to find register for each variable
        set<string> spilled_vars;
        select(mapping,var_stack,graph,registers,spilled_vars);
        
        // if something is spilled we need to create Load and Store instructions and repeat
        if(!spilled_vars.empty()){
        
            // finding variable with highest cardinality (here we should use some sort of heuristic)
            map<unsigned,set<string>> var_cardinality;
            for(auto it = spilled_vars.begin() ; it != spilled_vars.end() ; it++)
                if(actually_spilled.find(*it) == actually_spilled.end())
                    var_cardinality[graph[*it].size()].insert(*it);
            
            
            // if var_cardinality map is empty => we need to spill already spilled variable
            // and we can't do that therefore we can't allocate registers and we exit
            if(var_cardinality.empty()){
                cout << "Allocation isn't possible.. Number of regs is low.. Try again" << endl;
                break;
            }
            
            // if var_cardinality is not empty => spill variable (create Load and Store for it)
            auto it = --var_cardinality.end();
            string spilled = *it->second.begin();
            actually_spilled.insert(spilled);
            
            vector<Stmt*> new_statements;
            
            // used for updating jumps
            vector<unsigned> before(statements.size(),0);
            vector<unsigned> after(statements.size(),0);
        
            // adding Load and Store
            for(unsigned i = 0 ; i < statements.size() ; i++){
                set<string> use = statements[i]->use();
                set<string> def = statements[i]->def();
                
                if(use.find(spilled) != use.end()){
                    new_statements.push_back(new Load(spilled));
                    before[i]++;
                }
                new_statements.push_back(statements[i]);
                if(def.find(spilled) != def.end()){
                    new_statements.push_back(new Store(spilled));
                    after[i]++;
                }
            }
        
            statements = new_statements;
            
            // update jumps after adding Load and Store
            updateLS(before,after,statements);
            
        }
        else{ // if there isn't a spill, we allocated registers successfully
        
            allocated = true;
            cout << "\t" << "Code after Global register allocation" << endl << endl;
            for(unsigned i = 0 ; i < statements.size() ; i++){
                cout << i << "\t";
                statements[i]->printRegs(mapping);
            }
            cout << endl;
        }
    }    
    
    for(auto stmt : statements)
        delete stmt;
    
    exit(EXIT_SUCCESS);
}
